{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Plugin : <code>latest-git-tag</code>","text":"<p>This is a simple MkDocs plugin that just gets the most recent <code>Tag</code> from the local Git repository and makes it available as a markdown tag in the template.</p> <p>The Tag is just returned as a string with no formatting applied. If none is found, it returns \"No Tags found\"</p> <p>The reason for writing this plugin is that GitHub uses the <code>Tag</code> to name the release and, therefore we can use it to display the version of the documentation that corresponds to the release.</p> <p>Live Demo</p> <p>The latest Git Tag in this repository is : v0.1.1</p>"},{"location":"#installation","title":"Installation","text":"<p>Install the package with pip:</p> <pre><code>pip install mkdocs-latest-git-tag-plugin\n</code></pre> <p>or, if you are using Poetry:</p> <pre><code>poetry add mkdocs-latest-git-tag-plugin --group dev\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Activate the plugin in your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - latest-git-tag\n</code></pre> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p> <p>Then, in your template, you can use the <code>{{ latest_git_tag }}</code> variable:</p> <pre><code># My Project\n\nVersion: {{ latest_git_tag }}\n</code></pre> <p>The spaces around the tag are optional and it is case insensitive.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>At this time there are no configuration options.</p>"},{"location":"#license","title":"License","text":"<p>This is released under the MIT License. See the bundled LICENSE file for more details.</p>"},{"location":"#todo","title":"TODO","text":"<ul> <li>Add tests</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Please do feel free to open an Issue for any bugs or issues you find, or even a Pull Request with solutions \ud83d\ude0e</p> <p>Likewise, I am very open to new feature Pull Requests!</p>"},{"location":"development/contributing/#github-discussions","title":"GitHub Discussions","text":"<p>I have enabled Discussions on this repository, so if you have any questions, suggestions or just want to chat about this plugin, please feel free to start a discussion.</p>"},{"location":"development/contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"development/contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"development/contributing/#update-the-documentation-if-required","title":"Update the Documentation if required","text":"<p>If you have added or changed functionality, please Update the documentation also. This is a pre-req to having a PR merged. See Documentation for instructions</p>"},{"location":"development/contributing/#contribution-workflow","title":"Contribution Workflow","text":"<ol> <li>Fork this Repository</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Write your code, ensuring it is covered by new tests if applicable and    documentation.</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> </ol>"},{"location":"development/documentation/","title":"Documentation Website","text":""},{"location":"development/documentation/#development","title":"Development","text":"<p>The documentation for this project is created using MkDocs with the Material for MkDocs theme.</p> <p>For this project, the docs website is served using GitHub Pages, though since it is just HTML and CSS you can host it from any provider you choose.</p> <p>Source for this is stored in the <code>docs</code> folder off the root of the project, and consists of Markdown files. The main control file is <code>mkdocs.yml</code> in the root.</p> <p>To help with documentation development you can run a docs server on http://localhost:9000 using the below command :</p> <pre><code>$ mkdocs serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  Documentation built in 0.89 seconds\nINFO     -  [12:55:29] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [12:55:29] Serving on http://127.0.0.1:9000/\n</code></pre> <p>If you want the site to be opened to your local network (ie to test on a mobile or another local device), then you can use the below command :</p> <pre><code>poe docs:serve\n</code></pre> <p>This will run the <code>mkdocs serve</code> command, but will also open the site on your local network. You can then access the site on your other device using the IP address of your machine, and the port number shown in the output of the command.</p>"},{"location":"development/documentation/#build-the-documentation","title":"Build the Documentation","text":"<p>You can create a production-ready version of the site by using the <code>build</code> command:</p> <pre><code>$ poe docs:build\nINFO     -  Cleaning site directory\nINFO     -  Building documentation to directory: /home/seapagan/data/work/own/mkdocs-latest-git-tag-plugin/site\nINFO     -  Documentation built in 0.34 seconds\n</code></pre> <p>This will create a static website in the <code>site</code> folder which you can then upload to the hosting provider of your choice. See the next section if you are using GitHub Pages.</p>"},{"location":"development/documentation/#publish-to-github-pages","title":"Publish to GitHub Pages","text":"<p>When you are happy with the docs, they can be published automatically to GitHub Pages using the below command :</p> <pre><code>poe docs:publish\n</code></pre> <p>This command will automatically build the docs, and then push the <code>site</code> folder to GitHub</p> <p>Note that only someone with WRITE access to the repository can do this.</p>"}]}